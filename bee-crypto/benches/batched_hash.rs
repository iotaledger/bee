// Copyright 2020 IOTA Stiftung
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.

use bee_crypto::ternary::sponge::{BatchHasher, CurlPRounds, BATCH_SIZE};
use bee_ternary::{T5B1Buf, TritBuf, TryteBuf};

use criterion::{criterion_group, criterion_main, BenchmarkId, Criterion, Throughput};

fn batched_hasher(input: TritBuf<T5B1Buf>) {
    let mut hasher = BatchHasher::new(input.len(), CurlPRounds::Rounds81);

    for _ in 0..BATCH_SIZE {
        hasher.add(input.clone());
    }
    for _ in hasher.hash_batched() {}
}

fn unbatched_hasher(input: TritBuf<T5B1Buf>) {
    let mut hasher = BatchHasher::new(input.len(), CurlPRounds::Rounds81);

    for _ in 0..BATCH_SIZE {
        hasher.add(input.clone());
    }
    for _ in hasher.hash_unbatched() {}
}

fn bench_hasher(c: &mut Criterion) {
    let input_243 = "HHPELNTNJIOKLYDUW9NDULWPHCWFRPTDIUWLYUHQWWJVPAKKGKOAZFJPQJBLNDPALCVXGJLRBFSHATF9C";
    let input

    let input_243 = TryteBuf::try_from_str(input_243)
        .unwrap()
        .as_trits()
        .encode::<T5B1Buf>();
    let input_8019 = TryteBuf::try_from_str(input_8019)
        .unwrap()
        .as_trits()
        .encode::<T5B1Buf>();

    let mut group = c.benchmark_group("CurlP");
    group.throughput(Throughput::Elements(BATCH_SIZE as u64));
    for input in [input_243, input_8019].iter() {
        let length = input.len();
        group.bench_with_input(BenchmarkId::new("Batched", length), input, |b, i| {
            b.iter(|| batched_hasher(i.clone()))
        });
        group.bench_with_input(BenchmarkId::new("Unbatched", length), input, |b, i| {
            b.iter(|| unbatched_hasher(i.clone()))
        });
    }
    group.finish();
}

criterion_group!(benches, bench_hasher);
criterion_main!(benches);

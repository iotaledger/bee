// Copyright 2020 IOTA Stiftung
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.

use bee_crypto::ternary::sponge::{BatchHasher, CurlPRounds, BATCH_SIZE};
use bee_ternary::{T1B1Buf, TryteBuf};

#[test]
fn batched_curlp_input_243_output_243() {
    let input = "HHPELNTNJIOKLYDUW9NDULWPHCWFRPTDIUWLYUHQWWJVPAKKGKOAZFJPQJBLNDPALCVXGJLRBFSHATF9C";
    let output = "XMJNTUHSDIVRPCBKWPOZWTJFDRSKXZKNJEJSBIHQXQE9YVGTOFF9DMQTFOLCPVLPGMYUGJSTOZZSIGFGH";

    let input_trit_buf = TryteBuf::try_from_str(input).unwrap().as_trits().encode::<T1B1Buf>();

    let expected_hash = TryteBuf::try_from_str(output).unwrap().as_trits().encode::<T1B1Buf>();

    let mut batch_hasher = BatchHasher::new(input_trit_buf.len(), expected_hash.len(), CurlPRounds::Rounds81);

    for _ in 0..BATCH_SIZE {
        batch_hasher.add(input_trit_buf.clone());
    }

    for (index, hash) in batch_hasher.hash_batched().enumerate() {
        assert_eq!(expected_hash, hash, "input {} failed", index);
    }
}

#[test]
fn batched_curlp_input_8019_output_243() {
    let input
    let output = "DZTGVIDBLFLMPMWRHINVCLSXZBOCNRMSFAZOZFLEYGOWJQCXGJTGUCK9YM9KWRZEOSBWBWLTDOYRZ9999";

    let input_trit_buf = TryteBuf::try_from_str(input).unwrap().as_trits().encode::<T1B1Buf>();

    let expected_hash = TryteBuf::try_from_str(output).unwrap().as_trits().encode::<T1B1Buf>();

    let mut batch_hasher = BatchHasher::new(input_trit_buf.len(), expected_hash.len(), CurlPRounds::Rounds81);

    for _ in 0..BATCH_SIZE {
        batch_hasher.add(input_trit_buf.clone());
    }

    for (index, hash) in batch_hasher.hash_batched().enumerate() {
        assert_eq!(expected_hash, hash, "input {} failed", index);
    }
}

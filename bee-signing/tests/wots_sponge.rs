// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

use bee_crypto::ternary::sponge::{CurlP27, CurlP81, Kerl, Sponge};
use bee_signing::ternary::{
    seed::Seed,
    wots::{Error as WotsError, WotsSecurityLevel, WotsSpongePrivateKeyGeneratorBuilder},
    PrivateKey, PrivateKeyGenerator, PublicKey, RecoverableSignature,
};
use bee_ternary::{T1B1Buf, TryteBuf};

use std::str::FromStr;

const SEED: &str = "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
const MESSAGE: &str = "CHXHLHQLOPYP9NSUXTMWWABIBSBLUFXFRNWOZXJPVJPBCIDI99YBSCFYILCHPXHTSEYSYWIGQFERCRVDD";

#[test]
fn generator_missing_security_level() {
    assert_eq!(
        WotsSpongePrivateKeyGeneratorBuilder::<Kerl>::default().build().err(),
        Some(WotsError::MissingSecurityLevel)
    );
}

#[test]
fn generator_valid() {
    let security_levels = vec![
        WotsSecurityLevel::Low,
        WotsSecurityLevel::Medium,
        WotsSecurityLevel::High,
    ];
    for security in security_levels {
        assert!(WotsSpongePrivateKeyGeneratorBuilder::<Kerl>::default()
            .with_security_level(security)
            .build()
            .is_ok(),);
    }
}

fn roundtrip<S: Sponge + Default>() {
    let message_trits = TryteBuf::try_from_str(MESSAGE).unwrap().as_trits().encode::<T1B1Buf>();
    let seed = Seed::from_str(SEED).unwrap();
    let security_levels = vec![
        WotsSecurityLevel::Low,
        WotsSecurityLevel::Medium,
        WotsSecurityLevel::High,
    ];
    for security in security_levels {
        for index in 0..3 {
            let private_key_generator = WotsSpongePrivateKeyGeneratorBuilder::<S>::default()
                .with_security_level(security)
                .build()
                .unwrap();
            let mut private_key = private_key_generator.generate_from_seed(&seed, index).unwrap();
            let public_key = private_key.generate_public_key().unwrap();
            let signature = private_key.sign(&message_trits).unwrap();
            let recovered_public_key = signature.recover_public_key(&message_trits).unwrap();

            assert_eq!(public_key.as_trits(), recovered_public_key.as_trits());
            assert!(public_key.verify(&message_trits, &signature).unwrap());
        }
    }
}

#[test]
fn kerl_roundtrip() {
    roundtrip::<Kerl>();
}

#[test]
fn curl27_roundtrip() {
    roundtrip::<CurlP27>();
}

#[test]
fn curl81_roundtrip() {
    roundtrip::<CurlP81>();
}

#[test]
fn example() {
    let key_trytes
    let entropy =
        TryteBuf::try_from_str("CEFLDDLMF9TO9ZLLTYXIPVFIJKAOFRIQLGNYIDZCTDYSWMNXPYNGFAKHQDY9ABGGQZHEFTXKWKWZXEIUD")
            .unwrap()
            .as_trits()
            .encode::<T1B1Buf>();
    let key = TryteBuf::try_from_str(key_trytes)
        .unwrap()
        .as_trits()
        .encode::<T1B1Buf>();
    let private_key_generator = WotsSpongePrivateKeyGeneratorBuilder::<Kerl>::default()
        .with_security_level(WotsSecurityLevel::Medium)
        .build()
        .unwrap();
    let generated_key = private_key_generator.generate_from_entropy(&entropy).unwrap();

    assert_eq!(&key.as_slice(), &generated_key.as_trits());
}

#[test]
fn invalid_entropy_length() {
    let entropy = TryteBuf::try_from_str("CEFLDDLMF9TO9ZLLTYXINXPYNGFAKHQDY9ABGGQZHEFTXKWKWZXEIUD")
        .unwrap()
        .as_trits()
        .encode::<T1B1Buf>();
    let private_key_generator = WotsSpongePrivateKeyGeneratorBuilder::<Kerl>::default()
        .with_security_level(WotsSecurityLevel::Medium)
        .build()
        .unwrap();

    assert_eq!(
        private_key_generator.generate_from_entropy(&entropy).err(),
        Some(WotsError::InvalidEntropyLength(entropy.len()))
    );
}

#[test]
fn non_null_last_entropy_trit() {
    let entropy =
        TryteBuf::try_from_str("CEFLDDLMF9TO9ZLLTYXIPVFIJKAOFRIQLGNYIDZCTDYSWMNXPYNGFAKHQDY9ABGGQZHEFTXKWKWZXEIUS")
            .unwrap()
            .as_trits()
            .encode::<T1B1Buf>();
    let private_key_generator = WotsSpongePrivateKeyGeneratorBuilder::<Kerl>::default()
        .with_security_level(WotsSecurityLevel::Medium)
        .build()
        .unwrap();

    assert_eq!(
        private_key_generator.generate_from_entropy(&entropy).err(),
        Some(WotsError::NonNullEntropyLastTrit)
    );
}

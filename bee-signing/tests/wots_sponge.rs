// Copyright 2020 IOTA Stiftung
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.

use bee_crypto::ternary::sponge::{CurlP27, CurlP81, Kerl, Sponge};
use bee_signing::ternary::{
    seed::Seed,
    wots::{Error as WotsError, WotsSecurityLevel, WotsSpongePrivateKeyGeneratorBuilder},
    PrivateKey, PrivateKeyGenerator, PublicKey, RecoverableSignature,
};
use bee_ternary::{T1B1Buf, TryteBuf};

use std::str::FromStr;

const SEED: &str = "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
const MESSAGE: &str = "CHXHLHQLOPYP9NSUXTMWWABIBSBLUFXFRNWOZXJPVJPBCIDI99YBSCFYILCHPXHTSEYSYWIGQFERCRVDD";

fn sponge_roundtrip<S: Sponge + Default>() {
    let message_trits = TryteBuf::try_from_str(MESSAGE).unwrap().as_trits().encode::<T1B1Buf>();
    let seed = Seed::from_str(SEED).unwrap();
    let security_levels = vec![
        WotsSecurityLevel::Low,
        WotsSecurityLevel::Medium,
        WotsSecurityLevel::High,
    ];
    for security in security_levels {
        for index in 0..3 {
            let private_key_generator = WotsSpongePrivateKeyGeneratorBuilder::<S>::default()
                .security_level(security)
                .build()
                .unwrap();
            let mut private_key = private_key_generator.generate_from_seed(&seed, index).unwrap();
            let public_key = private_key.generate_public_key().unwrap();
            let signature = private_key.sign(&message_trits).unwrap();
            let recovered_public_key = signature.recover_public_key(&message_trits).unwrap();

            assert_eq!(public_key.as_trits(), recovered_public_key.as_trits());

            let valid = public_key.verify(&message_trits, &signature).unwrap();

            assert!(valid);
        }
    }
}

#[test]
fn sponge_kerl_roundtrip() {
    sponge_roundtrip::<Kerl>();
}

#[test]
fn sponge_curl27_roundtrip() {
    sponge_roundtrip::<CurlP27>();
}

#[test]
fn sponge_curl81_roundtrip() {
    sponge_roundtrip::<CurlP81>();
}

#[test]
fn sponge_example() {
    let key_trytes
    let entropy =
        TryteBuf::try_from_str("CEFLDDLMF9TO9ZLLTYXIPVFIJKAOFRIQLGNYIDZCTDYSWMNXPYNGFAKHQDY9ABGGQZHEFTXKWKWZXEIUD")
            .unwrap()
            .as_trits()
            .encode::<T1B1Buf>();
    let key = TryteBuf::try_from_str(key_trytes)
        .unwrap()
        .as_trits()
        .encode::<T1B1Buf>();
    let private_key_generator = WotsSpongePrivateKeyGeneratorBuilder::<Kerl>::default()
        .security_level(WotsSecurityLevel::Medium)
        .build()
        .unwrap();
    let generated_key = private_key_generator.generate_from_entropy(&entropy).unwrap();

    assert_eq!(&key.as_slice(), &generated_key.as_trits());
}

#[test]
fn sponge_invalid_entropy_length() {
    let entropy = TryteBuf::try_from_str("CEFLDDLMF9TO9ZLLTYXINXPYNGFAKHQDY9ABGGQZHEFTXKWKWZXEIUD")
        .unwrap()
        .as_trits()
        .encode::<T1B1Buf>();
    let private_key_generator = WotsSpongePrivateKeyGeneratorBuilder::<Kerl>::default()
        .security_level(WotsSecurityLevel::Medium)
        .build()
        .unwrap();

    match private_key_generator.generate_from_entropy(&entropy) {
        Err(WotsError::InvalidEntropyLength(len)) => assert_eq!(len, entropy.len()),
        _ => unreachable!(),
    };
}

#[test]
fn shake_non_null_last_entropy_trit() {
    let entropy =
        TryteBuf::try_from_str("CEFLDDLMF9TO9ZLLTYXIPVFIJKAOFRIQLGNYIDZCTDYSWMNXPYNGFAKHQDY9ABGGQZHEFTXKWKWZXEIUS")
            .unwrap()
            .as_trits()
            .encode::<T1B1Buf>();
    let private_key_generator = WotsSpongePrivateKeyGeneratorBuilder::<Kerl>::default()
        .security_level(WotsSecurityLevel::Medium)
        .build()
        .unwrap();

    assert_eq!(
        private_key_generator.generate_from_entropy(&entropy).err(),
        Some(WotsError::NonNullEntropyLastTrit)
    );
}

name: 'Compile and cache RocksDB'
runs:
  using: "composite"
  steps:
    - name: Set rocksdb version (Unix)
      if: matrix.os != 'windows-latest'
      run: echo "ROCKSDB_VERSION=6.22.1" >> $GITHUB_ENV

    - name: Set rocksdb version (Windows)
      if: matrix.os == 'windows-latest'
      run: echo "ROCKSDB_VERSION=6.22.1.20635" >> $env:GITHUB_ENV

    - name: Cache rocksdb
      uses: actions/cache@v2
      id: cache-rocksdb
      with:
        path: ${{ env.LOCAL_BINARIES_PATH }}
        key: rocksdb-${{ runner.os }}-${{ env.ROCKSDB_VERSION }}

    - name: Compile rocksdb (Linux)
      if: steps.cache-rocksdb.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-latest'
      run: |
        curl -L -O https://github.com/facebook/rocksdb/archive/refs/tags/v$ROCKSDB_VERSION.tar.gz
        tar -xzf v$ROCKSDB_VERSION.tar.gz
        cd rocksdb-$ROCKSDB_VERSION
        sudo apt install libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev
        make shared_lib
        cp -L librocksdb.so $LOCAL_BINARIES_PATH
        echo "ROCKSDB_LIB_DIR=$LOCAL_BINARIES_PATH/librocksdb.so" >> $GITHUB_ENV

    - name: Compile rocksdb (MacOS)
      if: steps.cache-rocksdb.outputs.cache-hit != 'true' && matrix.os == 'macos-latest'
      run: |
        curl -L -O https://github.com/facebook/rocksdb/archive/refs/tags/v$ROCKSDB_VERSION.tar.gz
        tar -xzf v$ROCKSDB_VERSION.tar.gz
        cd rocksdb-$ROCKSDB_VERSION
        make shared_lib
        cp -L librocksdb.dylib $LOCAL_BINARIES_PATH
        echo "ROCKSDB_LIB_DIR=$LOCAL_BINARIES_PATH/librocksdb.dylib" >> $GITHUB_ENV

    - name: Install rocksdb (Windows)
      if: steps.cache-rocksdb.outputs.cache-hit != 'true' && matrix.os == 'windows-latest'
      run: |
        nuget install RocksDB -Version $env:ROCKSDB_VERSION -OutputDirectory $env:LOCAL_BINARIES_PATH
        echo "ROCKSDB_LIB_DIR=$env:LOCAL_BINARIES_PATH\RocksDB.$env:ROCKSDB_VERSION" >> $env:GITHUB_ENV
